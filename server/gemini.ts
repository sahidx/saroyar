import { GoogleGenAI } from "@google/genai";

// Multiple API keys support for rotation
const API_KEYS = [
  process.env.GEMINI_API_KEY_1,
  process.env.GEMINI_API_KEY_2,
  process.env.GEMINI_API_KEY_3,
  process.env.GEMINI_API_KEY_4,
  process.env.GEMINI_API_KEY_5,
  process.env.GEMINI_API_KEY_6,
  // Fallback to old key name for backward compatibility
  process.env.GOOGLE_API_KEY,
  process.env.GEMINI_API_KEY
].filter(key => key && key.trim() !== ''); // Remove empty/undefined keys

console.log(`ЁЯФС Gemini API Keys configured: ${API_KEYS.length} keys available`);

let currentKeyIndex = 0;

// Function to get current API client with rotation
function getCurrentGeminiClient(): GoogleGenAI | null {
  if (API_KEYS.length === 0) {
    console.warn('тЪая╕П  No Gemini API keys configured');
    return null;
  }
  
  const apiKey = API_KEYS[currentKeyIndex];
  console.log(`ЁЯФД Using Gemini API Key #${currentKeyIndex + 1}/${API_KEYS.length}`);
  return new GoogleGenAI({ apiKey });
}

// Function to rotate to next API key
function rotateToNextKey(): boolean {
  if (API_KEYS.length <= 1) {
    console.warn('тЪая╕П  No additional API keys available for rotation');
    return false;
  }
  
  const oldIndex = currentKeyIndex;
  currentKeyIndex = (currentKeyIndex + 1) % API_KEYS.length;
  console.log(`ЁЯФД Rotated from API Key #${oldIndex + 1} to #${currentKeyIndex + 1}`);
  return true;
}

// Function to check if error is quota/rate limit related
function isQuotaError(error: any): boolean {
  const errorMessage = error?.message?.toLowerCase() || '';
  const errorStatus = error?.status || error?.code;
  
  return (
    errorMessage.includes('quota') ||
    errorMessage.includes('rate limit') ||
    errorMessage.includes('limit exceeded') ||
    errorMessage.includes('resource exhausted') ||
    errorStatus === 429 ||
    errorStatus === 403
  );
}

// Function to attempt API call with current key and retry with rotation on quota errors
async function attemptGeminiCall(prompt: string, maxRetries: number = API_KEYS.length): Promise<any> {
  let attempt = 0;
  let lastError: any = null;

  while (attempt < maxRetries) {
    const genAI = getCurrentGeminiClient();
    
    if (!genAI) {
      throw new Error('No Gemini API keys configured. Please set GEMINI_API_KEY_1, GEMINI_API_KEY_2, etc.');
    }

    try {
      console.log(`ЁЯдЦ Attempting Gemini API call (attempt ${attempt + 1}/${maxRetries})`);
      
      const response = await genAI.models.generateContent({
        model: "gemini-1.5-flash",
        contents: prompt,
      });
      const text = response.text || "";

      console.log(`тЬЕ Gemini API call successful with Key #${currentKeyIndex + 1}`);
      return text;

    } catch (error: any) {
      lastError = error;
      console.error(`тЭМ Gemini API call failed with Key #${currentKeyIndex + 1}:`, error.message);

      // If this is a quota/rate limit error and we have more keys, try the next one
      if (isQuotaError(error)) {
        console.log(`ЁЯЪл Quota/Rate limit reached for Key #${currentKeyIndex + 1}`);
        
        if (rotateToNextKey()) {
          console.log(`ЁЯФД Retrying with next API key...`);
          attempt++;
          continue;
        } else {
          console.error('тЭМ All API keys exhausted');
          break;
        }
      } else {
        // For non-quota errors, don't retry
        console.error(`тЭМ Non-quota error occurred: ${error.message}`);
        throw error;
      }
    }
  }

  // If we get here, all keys failed
  throw new Error(`All ${API_KEYS.length} Gemini API keys exhausted or failed. Last error: ${lastError?.message}`);
}

export async function generateQuestionsWithGemini(subject: string, examType: string, classLevel: string, paper: string, chapter: string, questionType: string, questionLanguage: string, difficulty: string, count: number): Promise<any> {
  try {
    if (API_KEYS.length === 0) {
      throw new Error('Google Gemini API key is required for question generation. Please configure GEMINI_API_KEY in environment variables.');
    }

  const subjectBangla = subject === 'science' ? 'ржмрж┐ржЬрзНржЮрж╛ржи' : 'ржЧржгрж┐ржд';
    const examTypeBangla = examType === 'academic' ? 'ржПржХрж╛ржбрзЗржорж┐ржХ' : 'ржнрж░рзНрждрж┐ ржкрж░рзАржХрзНрж╖рж╛';
    const classLevelBangla = classLevel === '9-10' ? 'ржиржмржо-ржжрж╢ржо рж╢рзНрж░рзЗржгрж┐' : 'ржПржХрж╛ржжрж╢-ржжрзНржмрж╛ржжрж╢ рж╢рзНрж░рзЗржгрж┐ (HSC)';
    
    let difficultyLevels = '';
    if (difficulty === 'mixed') {
      difficultyLevels = 'рж╕рж╣ржЬ, ржоржзрзНржпржо ржУ ржЬржЯрж┐рж▓ рж╕рзНрждрж░рзЗрж░ ржорж┐рж╢рзНрж░ржг';
    } else if (difficulty === 'easy') {
      difficultyLevels = 'рж╕рж╣ржЬ рж╕рзНрждрж░рзЗрж░';
    } else if (difficulty === 'medium') {
      difficultyLevels = 'ржоржзрзНржпржо рж╕рзНрждрж░рзЗрж░';
    } else {
      difficultyLevels = 'ржЬржЯрж┐рж▓ рж╕рзНрждрж░рзЗрж░';
    }

    const questionTypeDetails: {[key: string]: string} = {
      mcq: 'ржмрж╣рзБржирж┐рж░рзНржмрж╛ржЪржирзА ржкрзНрж░рж╢рзНржи (MCQ) - рзкржЯрж┐ ржЕржкрж╢ржирж╕рж╣',
      cq: 'рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржкрзНрж░рж╢рзНржи (CQ) - рзи-рзй рж▓рж╛ржЗржирзЗрж░ ржЙрждрзНрждрж░',
      creative: 'рж╕рзГржЬржирж╢рзАрж▓ ржкрзНрж░рж╢рзНржи - ржЬрзНржЮрж╛ржи, ржЕржирзБржзрж╛ржмржи, ржкрзНрж░ржпрж╝рзЛржЧ ржУ ржЙржЪрзНржЪрждрж░ ржжржХрзНрж╖рждрж╛ рж╕рзНрждрж░'
    };

    const prompt = `ржЖржкржирж┐ ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮ ${subjectBangla} рж╢рж┐ржХрзНрж╖ржХред ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ NCTB ржХрж╛рж░рж┐ржХрзБрж▓рж╛ржо ржПржмржВ ${examTypeBangla} ржкрж░рзАржХрзНрж╖рж╛рж░ ржорж╛ржиржжржгрзНржб ржЕржирзБрж╕рж╛рж░рзЗ ${count}ржЯрж┐ ${difficultyLevels} ${questionTypeDetails[questionType] || 'ржкрзНрж░рж╢рзНржи'} рждрзИрж░рж┐ ржХрж░рзБржиред

**ржкрзНрж░рж╢рзНржирзЗрж░ ржмрж┐ржмрж░ржг:**
- ржмрж┐рж╖ржпрж╝: ${subjectBangla}
- рж╢рзНрж░рзЗржгрж┐: ${classLevelBangla}
${paper ? `- ржкрждрзНрж░: ${paper}` : ''}
- ржЕржзрзНржпрж╛ржпрж╝: ${chapter}
- ржкрзНрж░рж╢рзНржирзЗрж░ ржзрж░ржи: ${questionTypeDetails[questionType] || 'рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржи'}
- ржХржарж┐ржирждрж╛: ${difficultyLevels}
- ржкрзНрж░рж╢рзНржирзЗрж░ ржнрж╛рж╖рж╛: ржмрж╛ржВрж▓рж╛

**ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
1. ржкрзНрж░рж╢рзНржи ржУ ржЕржкрж╢ржи рж╕рж░рзНржмржжрж╛ ржмрж╛ржВрж▓рж╛ржпрж╝ рж▓рж┐ржЦрзБржи
2. ржЙрждрзНрждрж░ рж╕рж░рзНржмржжрж╛ ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛рж╕рж╣ ржжрж┐ржи
3. ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ, рж╕рзНржерж╛ржирзАржпрж╝ ржЙржжрж╛рж╣рж░ржг ржПржмржВ ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗрж░ ржкрзНрж░ржпрж╝рзЛржЧ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи
4. ${examTypeBangla === 'ржнрж░рзНрждрж┐ ржкрж░рзАржХрзНрж╖рж╛' ? 'ржмрж┐рж╢рзНржмржмрж┐ржжрзНржпрж╛рж▓ржпрж╝ ржнрж░рзНрждрж┐ ржкрж░рзАржХрзНрж╖рж╛рж░ ржорж╛ржи ржЕржирзБржпрж╛ржпрж╝рзА' : 'ржмрзЛрж░рзНржб ржкрж░рзАржХрзНрж╖рж╛рж░ ржорж╛ржи ржЕржирзБржпрж╛ржпрж╝рзА'} ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ ржХрж░рзБржи

${subject === 'science' ? `
**ржмрж┐ржЬрзНржЮрж╛ржирзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
- ржкржжрж╛рж░рзНржержмрж┐ржЬрзНржЮрж╛ржи, рж░рж╕рж╛ржпрж╝ржи, ржЬрзАржмржмрж┐ржЬрзНржЮрж╛ржи рж╕ржоржирзНржмрж┐ржд ржзрж╛рж░ржгрж╛
- ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзА ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯрзЗ ржЙржжрж╛рж╣рж░ржг (ржХрзГрж╖рж┐, ржкрж░рж┐ржмрзЗрж╢, рж╕рзНржмрж╛рж╕рзНржерзНржп, ржкрзНрж░ржпрзБржХрзНрждрж┐)
- ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрзНрж╖рзЗрждрзНрж░рзЗ рж╕рзВрждрзНрж░, ржмрж┐ржХрзНрж░рж┐ржпрж╝рж╛, ржЬрзИржм ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ рж▓рж┐ржЦрзБржи
- ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗрж░ ржкрзНрж░ржпрж╝рзЛржЧ ржкрзНрж░рж╢рзНржирзЗ ржЖржирзБржи` : `
**ржЧржгрж┐рждрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
- ржЕрзНржпрж╛рж▓ржЬрзЗржмрзНрж░рж╛, ржЬрзНржпрж╛ржорж┐рждрж┐, рждрзНрж░рж┐ржХрзЛржгржорж┐рждрж┐, ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи/рж╕ржорзНржнрж╛ржмрзНржпрждрж╛ (рж╢рзНрж░рзЗржгрж┐ ржЕржирзБржпрж╛ржпрж╝рзА)
- ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи ржпрзЛржЧрзНржп ржкрзНрж░рж╢рзНржи
- рж╕рзВрждрзНрж░ ржкрзНрж░ржпрж╝рзЛржЧ ржУ ржмрж╛рж╕рзНрждржм ржЙржжрж╛рж╣рж░ржг (ржбрзЗржЯрж╛, ржкрж░рж┐ржорж╛ржк, ржЖрж░рзНржерж┐ржХ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ)
- ржмрж┐ржнрзНрж░рж╛ржирзНрждрж┐ржХрж░ ржХрж┐ржирзНрждрзБ ржпрзБржХрзНрждрж┐ржпрзБржХрзНржд MCQ ржЕржкрж╢ржи рждрзИрж░рж┐ ржХрж░рзБржи`}

ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржЯрж┐ ржмрзИржз JSON ржЕрзНржпрж╛рж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзБржиред ржХрзЛржирзЛ ржЕрждрж┐рж░рж┐ржХрзНржд ржЯрзЗржХрзНрж╕ржЯ, ржмрзНржпрж╛ржЦрзНржпрж╛ ржмрж╛ ржорж╛рж░рзНржХржбрж╛ржЙржи ржпрзЛржЧ ржХрж░ржмрзЗржи ржирж╛ред

${questionType === 'mcq' ? 'MCQ ржлрж░ржорзНржпрж╛ржЯ:' : questionType === 'cq' ? 'CQ ржлрж░ржорзНржпрж╛ржЯ:' : 'рж╕рзГржЬржирж╢рзАрж▓ ржкрзНрж░рж╢рзНржи ржлрж░ржорзНржпрж╛ржЯ:'}
[{"questionText": "ржмрж╛ржВрж▓рж╛ржпрж╝ ржкрзНрж░рж╢рзНржи", "questionType": "${questionType}", ${questionType === 'mcq' ? '"options": ["ржХ) ...", "ржЦ) ...", "ржЧ) ...", "ржШ) ..."], "correctAnswer": "ржХ) ...",' : '"options": null, "correctAnswer": null,'} "answer": "ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЙрждрзНрждрж░", "marks": ${questionType === 'creative' ? '10' : questionType === 'cq' ? '2' : '1'}}]`;

    // Use the new rotation system for API calls
    const content = await attemptGeminiCall(prompt);
    console.log("Gemini raw response for Bangladesh questions:", content);
    
    // Try to extract JSON from the response
    let jsonMatch = content.match(/\[[\s\S]*\]/);
    
    // If no JSON found, try to extract from code blocks
    if (!jsonMatch) {
      const codeBlockMatch = content.match(/```json\n([\s\S]*?)\n```/) || content.match(/```\n([\s\S]*?)\n```/);
      if (codeBlockMatch) {
        jsonMatch = [codeBlockMatch[1]];
      }
    }
    
    if (jsonMatch) {
      try {
        const questions = JSON.parse(jsonMatch[0]);
        console.log("Parsed Bangladesh Gemini questions:", questions);
        return questions;
      } catch (parseError) {
        console.error("JSON parsing error:", parseError);
        throw new Error('Failed to parse AI response JSON');
      }
    } else {
      console.log("No JSON match found in Bangladesh Gemini response:", content);
      throw new Error('Invalid AI response format - no JSON found');
    }
  } catch (error: any) {
    console.error('Error generating Bangladesh questions with Gemini:', error);
    
    // Enhanced error messages for API key rotation system
    let errorMessage = '';
    if (error?.message?.includes('exhausted')) {
      errorMessage = `рж╕ржХрж▓ ${API_KEYS.length}ржЯрж┐ Gemini API key ржПрж░ limit рж╢рзЗрж╖! ржирждрзБржи key ржпрзЛржЧ ржХрж░рзБржи ржмрж╛ quota reset ржПрж░ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред`;
    } else if (error?.status === 429 || isQuotaError(error)) {
      errorMessage = 'API quota/rate limit ржкрзМржБржЫрзЗржЫрзЗ! ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред';
    } else if (error?.message?.includes('API key')) {
      errorMessage = 'Gemini API key рж╕ржорж╕рзНржпрж╛! GEMINI_API_KEY_1, GEMINI_API_KEY_2 etc. рж╕рзЗржЯ ржХрж░рзБржиред';
    } else {
      errorMessage = `API рж╕ржВржпрзЛржЧ рж╕ржорж╕рзНржпрж╛: ${error.message || 'ржЕржЬрж╛ржирж╛ рждрзНрж░рзБржЯрж┐'}`;
    }
    
    // Return error questions that clearly indicate the problem
    const errorQuestions = [];
    for (let i = 0; i < count; i++) {
      errorQuestions.push({
        questionText: `тЭМ API рждрзНрж░рзБржЯрж┐: ${subject === 'science' ? 'ржмрж┐ржЬрзНржЮрж╛ржи' : 'ржЧржгрж┐ржд'} ржкрзНрж░рж╢рзНржи ${i + 1} рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ - ${errorMessage}`,
        questionType: questionType,
        options: questionType === 'mcq' ? [
          'тЪая╕П API рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп ржкрзНрж░рж╢рзНржи рж▓рзЛржб рж╣ржпрж╝ржирж┐',
          'ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи',
          'Multiple API keys рж╕рзЗржЯ ржХрж░рзБржи',
          'Technical support ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи'
        ] : null,
        correctAnswer: questionType === 'mcq' ? 'тЪая╕П API рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп ржкрзНрж░рж╢рзНржи рж▓рзЛржб рж╣ржпрж╝ржирж┐' : null,
        answer: `ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржХрж╛рж░ржг: ${errorMessage}ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ GEMINI_API_KEY_1, GEMINI_API_KEY_2 etc. рж╕рзЗржЯ ржХрж░рзБржи ржПржмржВ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред`,
        marks: 1
      });
    }
    return errorQuestions;
  }
}

export async function solveDoubtWithGemini(question: string, subject: string): Promise<string> {
  try {
    if (API_KEYS.length === 0) {
      return `ЁЯдЦ Praggo AI рж╕ржорж╛ржзрж╛ржи (ржбрзЗржорзЛ ржорзЛржб)\n\nржЖржкржирж╛рж░ ${subject === 'science' ? 'ржмрж┐ржЬрзНржЮрж╛ржи' : 'ржЧржгрж┐ржд'} ржкрзНрж░рж╢рзНржи: "${question}"\n\nAPI key ржЫрж╛ржбрж╝рж╛ ржкрзВрж░рзНржг рж╕ржорж╛ржзрж╛ржи рж╕ржорзНржнржм ржиржпрж╝ред`;
    }

    const subjectBangla = subject === 'science' ? 'ржмрж┐ржЬрзНржЮрж╛ржи' : 'ржЧржгрж┐ржд';

  const prompt = `ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ NCTB ржнрж┐рждрзНрждрж┐ржХ ржПржХржЬржи ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ${subjectBangla} рж╢рж┐ржХрзНрж╖ржХред 

рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ ржкрзНрж░рж╢рзНржи: ${question}

ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╢рж┐ржХрзНрж╖рж╛ржмрзНржпржмрж╕рзНржерж╛ ржУ NCTB ржХрж╛рж░рж┐ржХрзБрж▓рж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА ржПржХржЯрж┐ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд, рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ рж╕ржорж╛ржзрж╛ржи ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи ржпрж╛рждрзЗ рж░ржпрж╝рзЗржЫрзЗ:

${subject === 'science' ? `ЁЯФм ржмрж┐ржЬрзНржЮрж╛ржирзЗрж░ ржЬржирзНржп:
- ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи (ржзрж╛рж░ржгрж╛ тЖТ рж╕рзВрждрзНрж░/ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ тЖТ ржкрзНрж░рзЯрзЛржЧ)
- ржкрж░рж┐ржмрзЗрж╢, рж╕рзНржмрж╛рж╕рзНржерзНржп, ржХрзГрж╖рж┐ ржмрж╛ ржкрзНрж░ржпрзБржХрзНрждрж┐ ржнрж┐рждрзНрждрж┐ржХ рж╕рзНржерж╛ржирзАржпрж╝ ржЙржжрж╛рж╣рж░ржг
- ржмрж╛ржбрж╝рждрж┐ ржЕржирзБрж╢рзАрж▓ржирзЗрж░ ржЬржирзНржп рзз-рзиржЯрж┐ ржкрзНрж░рж╢рзНржи ржкрзНрж░рж╕рзНрждрж╛ржм
- ржкрзНрж░ржпрж╝рзЛржЬржирзЗ рж╕рждрж░рзНржХрждрж╛ ржмрж╛ ржирж┐рж░рж╛ржкрждрзНрждрж╛ рждржерзНржп` : `тЮЧ ржЧржгрж┐рждрзЗрж░ ржЬржирзНржп:
- Step by step рж╕ржорж╛ржзрж╛ржи
- ржХрзЛржи ржзрж╛ржкрзЗ ржХрзЛржи рж╕рзВрждрзНрж░ ржкрзНрж░рзЯрзЛржЧ рж╣рж▓рзЛ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи
- рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ (common mistakes) рж╣рж╛ржЗрж▓рж╛ржЗржЯ ржХрж░рзБржи
- ржмрж┐ржХрж▓рзНржк рж╕ржорж╛ржзрж╛ржи ржерж╛ржХрж▓рзЗ рж╕ржВржХрзНрж╖рзЗржкрзЗ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи`}

ржЖржкржирж╛рж░ ржЙрждрзНрждрж░ ржПржЗржнрж╛ржмрзЗ рж╕рж╛ржЬрж╛ржи:
- ЁЯУЪ ржорзВрж▓ ржзрж╛рж░ржгрж╛
- ЁЯФН ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи  
- ЁЯТб ржЯрж┐ржкрж╕ ржУ ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐
- ЁЯОп рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк/ржорзВрж▓ ржмрж┐рж╖ржпрж╝рж╕ржорзВрж╣

рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАржжрзЗрж░ ржХрж╛ржЫрзЗ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржУ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржХрж░рзЗ рждрзБрж▓рзБржи ржпрж╛рж░рж╛ рж╕рждрзНржпрж┐ржХрж╛рж░рзЗрж░ ржзрж╛рж░ржгрж╛ ржмрзБржЭрждрзЗ ржЪрж╛ржпрж╝ред`;

    const response = await attemptGeminiCall(prompt);
    return response || "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржХрзЛржирзЛ рж╕ржорж╛ржзрж╛ржи рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред";
  } catch (error: any) {
    console.error('Error solving doubt with Gemini:', error);
    
    let errorMessage = '';
    if (error?.message?.includes('exhausted')) {
      errorMessage = `рж╕ржХрж▓ ${API_KEYS.length}ржЯрж┐ API key ржПрж░ limit рж╢рзЗрж╖!`;
    } else if (isQuotaError(error)) {
      errorMessage = 'API quota/rate limit reached!';
    } else {
      errorMessage = error?.message || 'ржЕржЬрж╛ржирж╛ рждрзНрж░рзБржЯрж┐';
    }
    
  return `ЁЯдЦ Praggo AI рж╕ржорж╛ржзрж╛ржи (рждрзНрж░рзБржЯрж┐)\n\nржЖржкржирж╛рж░ ${subject === 'science' ? 'ржмрж┐ржЬрзНржЮрж╛ржи' : 'ржЧржгрж┐ржд'} ржкрзНрж░рж╢рзНржи ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: "${question}"\n\nрждрзНрж░рзБржЯрж┐: ${errorMessage}\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ multiple GEMINI_API_KEY рж╕рзЗржЯ ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред`;
  }
}

// Sentiment analysis function for feedback
export async function analyzeSentiment(text: string): Promise<{ rating: number; confidence: number }> {
  try {
    if (API_KEYS.length === 0) {
      return { rating: 3, confidence: 0.5 };
    }

    const prompt = `Analyze the sentiment of this text and provide a rating from 1-5 and confidence 0-1. 
    Respond only with JSON: {"rating": number, "confidence": number}
    
    Text: ${text}`;

    const responseText = await attemptGeminiCall(prompt);
    const jsonText = responseText.replace(/```json|```/g, '').trim();
    
    return JSON.parse(jsonText);
  } catch (error) {
    console.error('Error analyzing sentiment:', error);
    return { rating: 3, confidence: 0.5 };
  }
}

// Bengali doubt solving function for students  
export async function solveBanglaDoubt(question: string): Promise<string> {
  try {
    if (API_KEYS.length === 0) {
      return 'GEMINI_API_KEY_1, GEMINI_API_KEY_2 etc. configured ржХрж░рзБржи doubt solve ржХрж░рж╛рж░ ржЬржирзНржпред';
    }

  const prompt = `ржЖржкржирж┐ ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮ ржмрж┐ржЬрзНржЮрж╛ржи ржУ ржЧржгрж┐ржд рж╢рж┐ржХрзНрж╖ржХред ржирж┐ржЪрзЗрж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛рж╕рж╣ ржжрж┐ржи:

**ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
1. ржЙрждрзНрждрж░ рж╕рж░рзНржмржжрж╛ ржмрж╛ржВрж▓рж╛ржпрж╝ ржжрж┐ржи
2. ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ ржУ ржЙржжрж╛рж╣рж░ржг ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи (ржмрж┐ржЬрзНржЮрж╛ржи/ржЧржгрж┐ржд ржкрзНрж░рж╕ржЩрзНржЧ ржЕржирзБржпрж╛ржпрж╝рзА)
3. ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи ржжрж┐ржи
4. ржкрзНрж░ржпрж╝рзЛржЬржирзЗ рж╕рзВрждрзНрж░ ржУ ржЧрж╛ржгрж┐рждрж┐ржХ рж╕ржорж╛ржзрж╛ржи ржжрж┐ржи

ржкрзНрж░рж╢рзНржи: ${question}`;

    const response = await attemptGeminiCall(prompt);
    return response || 'ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред';
  } catch (error) {
    console.error('Error solving doubt:', error);
    return 'ржжрзБржГржЦрж┐ржд, ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред';
  }
}