// Direct test of PraggoAI service
import { GoogleGenAI } from "@google/genai";

// Test the PraggoAI service directly
class PraggoAITest {
  constructor() {
    // Using the primary API key
    this.apiKey = "AIzaSyABdNCR_6wfhSOUJoGPWpSqUTWOGtbbBiQ";
    this.genai = new GoogleGenAI(this.apiKey);
    this.modelName = 'gemini-2.0-flash-exp';
  }

  async testQuestionGeneration() {
    try {
      console.log("ЁЯзк Testing PraggoAI Question Generation...");
      
      const model = this.genai.getGenerativeModel({ model: this.modelName });
      
      const prompt = `
рждрзБржорж┐ ржПржХржЬржи ржжржХрзНрж╖ рж╢рж┐ржХрзНрж╖рж╛ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮред рзмржо рж╢рзНрж░рзЗржгрзАрж░ ржЧржгрж┐ржд ржмрж┐рж╖ржпрж╝рзЗрж░ "ржкрзНрж░рж╛ржХрзГрждрж┐ржХ рж╕ржВржЦрзНржпрж╛" ржЕржзрзНржпрж╛ржпрж╝ ржерзЗржХрзЗ рззржЯрж┐ MCQ ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ ржХрж░рзЛред

ржкрзНрж░рж╢рзНржирзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:
- ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ рж╣рждрзЗ рж╣ржмрзЗ
- рзмржо рж╢рзНрж░рзЗржгрзАрж░ ржЙржкржпрзБржХрзНржд ржХржарж┐ржирждрж╛
- рзкржЯрж┐ ржЕржкрж╢ржи (a, b, c, d)
- рж╕рзНржкрж╖рзНржЯ рж╕ржарж┐ржХ ржЙрждрзНрждрж░

JSON ржлрж░ржорзНржпрж╛ржЯ:
{
  "question": "ржкрзНрж░рж╢рзНржи ржПржЦрж╛ржирзЗ",
  "options": {
    "a": "ржЕржкрж╢ржи ржП",
    "b": "ржЕржкрж╢ржи ржмрж┐", 
    "c": "ржЕржкрж╢ржи рж╕рж┐",
    "d": "ржЕржкрж╢ржи ржбрж┐"
  },
  "correctAnswer": "a",
  "explanation": "ржмрзНржпрж╛ржЦрзНржпрж╛"
}
`;

      const result = await model.generateContent(prompt);
      const response = result.response;
      const text = response.text();
      
      console.log("тЬЕ Raw Response:", text);
      
      // Try to parse JSON
      const cleanText = text.replace(/```json\n?|```\n?/g, '').trim();
      const questionData = JSON.parse(cleanText);
      
      console.log("тЬЕ Parsed Question Data:");
      console.log("ЁЯУЭ Question:", questionData.question);
      console.log("ЁЯУЛ Options:", questionData.options);
      console.log("тЬФя╕П Correct Answer:", questionData.correctAnswer);
      console.log("ЁЯТб Explanation:", questionData.explanation);
      
      return questionData;
      
    } catch (error) {
      console.error("тЭМ Test Failed:", error);
      
      if (error.message?.includes('quota')) {
        console.log("тЪая╕П Quota Error Detected - API key rotation needed");
      }
      
      throw error;
    }
  }
}

// Run the test
async function runTest() {
  const tester = new PraggoAITest();
  try {
    const result = await tester.testQuestionGeneration();
    console.log("ЁЯОЙ Test Successful! Question generation is working.");
    return result;
  } catch (error) {
    console.error("ЁЯТе Test Failed:", error.message);
  }
}

runTest();