// Test PraggoAI Service directly using TypeScript
import { GoogleGenAI } from "@google/genai";

// Copy the working structure from praggoAI.ts
class PraggoAITester {
  private readonly API_KEY = "AIzaSyABdNCR_6wfhSOUJoGPWpSqUTWOGtbbBiQ";
  private readonly modelName = 'gemini-2.0-flash-exp';

  private getClient() {
    try {
      return new GoogleGenAI({ apiKey: this.API_KEY });
    } catch (error) {
      console.error('‚ùå Failed to create Gemini client:', error);
      return null;
    }
  }

  async testQuestionGeneration() {
    console.log("üß™ Testing PraggoAI Question Generation System...");
    
    const genAI = this.getClient();
    if (!genAI) {
      throw new Error('Failed to initialize Gemini client');
    }

    try {
      const prompt = `
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¶‡¶ï‡ßç‡¶∑ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡•§ ‡ß¨‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ‡¶∞ ‡¶ó‡¶£‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ "‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ" ‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶•‡ßá‡¶ï‡ßá ‡ßß‡¶ü‡¶ø MCQ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã‡•§

‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø:
- ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá
- ‡ß¨‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ‡¶∞ ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶†‡¶ø‡¶®‡¶§‡¶æ  
- ‡ß™‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® (a, b, c, d)
- ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞

JSON ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:
{
  "question": "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá",
  "options": {
    "a": "‡¶Ö‡¶™‡¶∂‡¶® ‡¶è",
    "b": "‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡¶ø",
    "c": "‡¶Ö‡¶™‡¶∂‡¶® ‡¶∏‡¶ø", 
    "d": "‡¶Ö‡¶™‡¶∂‡¶® ‡¶°‡¶ø"
  },
  "correctAnswer": "a",
  "explanation": "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ"
}
`;

      console.log("üì° Making API call to Gemini...");
      
      const response = await genAI.models.generateContent({
        model: this.modelName,
        contents: [{ role: 'user', parts: [{ text: prompt }] }]
      });

      console.log("‚úÖ API Response received!");

      // Parse response using the same logic as praggoAI.ts
      const anyResp: any = response as any;
      let result: string = '';
      
      if (typeof anyResp.text === 'function') {
        result = anyResp.text();
      } else if (typeof anyResp.text === 'string') {
        result = anyResp.text;
      } else if (anyResp.candidates?.[0]?.content?.parts?.[0]?.text) {
        result = anyResp.candidates[0].content.parts[0].text;
      } else if (anyResp.output_text) {
        result = anyResp.output_text;
      } else {
        console.log('üîç Full Response Structure:', JSON.stringify(anyResp, null, 2));
        throw new Error('Could not extract text from response');
      }

      console.log("üìù Raw AI Response:");
      console.log(result);
      console.log("\n" + "=".repeat(50) + "\n");

      // Try to parse as JSON
      const cleanText = result.replace(/```json\n?|```\n?/g, '').trim();
      
      try {
        const questionData = JSON.parse(cleanText);
        console.log("‚úÖ Successfully parsed question:");
        console.log("üìã Question:", questionData.question);
        console.log("üî§ Options:", questionData.options);
        console.log("‚úîÔ∏è Correct Answer:", questionData.correctAnswer);
        console.log("üí° Explanation:", questionData.explanation);
        
        return {
          success: true,
          data: questionData,
          raw: result
        };
      } catch (parseError) {
        console.log("‚ö†Ô∏è Failed to parse as JSON, but AI responded:");
        console.log(result);
        return {
          success: false,
          error: "JSON parsing failed",
          raw: result
        };
      }

    } catch (error: any) {
      console.error("‚ùå API Call Failed:", error.message);
      
      if (error.message?.includes('quota') || error.message?.includes('RESOURCE_EXHAUSTED')) {
        console.log("‚ö†Ô∏è Quota Error - API key needs replacement or billing");
      }
      
      throw error;
    }
  }
}

// Run the test
async function runTest() {
  const tester = new PraggoAITester();
  
  try {
    const result = await tester.testQuestionGeneration();
    
    if (result.success) {
      console.log("\nüéâ QUESTION GENERATION IS WORKING! ‚úÖ");
      console.log("‚ú® The PraggoAI system can generate proper Bengali questions.");
    } else {
      console.log("\n‚ö†Ô∏è AI responds but JSON format needs adjustment");
      console.log("üîß The system works but may need prompt refinement");
    }
    
    return result;
  } catch (error: any) {
    console.error("\nüí• QUESTION GENERATION FAILED!");
    console.error("‚ùå Error:", error.message);
    
    if (error.message?.includes('quota')) {
      console.log("\nüîë SOLUTION: Add more API keys to the rotation system");
      console.log("üìç Location: server/praggoAI.ts lines 10-15");
    }
  }
}

runTest();